Basic ReactNative
===========================================
các packgage base:
- react-navigation-drawer
- react-navigation-stack
- react-navigation-tabs
- react-navigation-header-buttons
- react-native-screens
- react-navigation-material-bottom-tabs
- react-native-paper
- https://daveceddia.com/deploy-react-express-app-heroku/?fbclid=IwAR3SGUuPdl1yxFb2TDC3Gps5lBsE8Jp2XBEycHMemWRtfHv4o1vAQxw07CQ
npm i --save react-navigation-drawer react-native-safe-area-context react-navigation-stack react-navigation-tabs react-navigation-header-buttons react-native-screens react-navigation-material-bottom-tabs react-native-paper react-navigation react-native-reanimated react-native-ionicons
- react-native start --reset-cache

===========================================
các thuộc tính lạ của react-native:
TouchableWithoutFeedBack,
Keyboard
Alert
Dimensions
Platform: .OS nhận biết môi trường là android hay ios
	- .select({ios: ..., android: ....})
KeyboardAvoidinhView: bao bên ngoài để đảm bảo keyboad không bị phủ lên app
	- behavior="position" , "padding", "height" 
	- keyboadVerticalOffset: để set màn hình trượt lên khi mở keyboad
SafeAreaView: bọc trọng app.js
=================
+ Truyền data từ parent vào con:
	ở parent <childrenComponent data = {data}> => ở children gọi props.data
+ Truyền data từ con ra parent:
	ở children props.data(this, {data})
	ở parent truyền cho con một hàm, hàm nhận param
+ Touchable , TouchableOpacity, TouchableHightlight, TouchableNativeFeedback dùng để tạo sự kiên khi ấn vào component (TouchableOpacity sẽ làm mờ component khi ấn, làm xung quanh component highlight khi ấn, TouchableNativeFeedback làm hiệu ứng lan tỏa khi ấn vào component)
+ Modal cần thuộc tính visible để hiển thị có thể thêm options animationType để hiển thị đẹp hơn
======================================================================
DEBUGER
+ Vuốt mở rộng chọ remote Js Debugging
==============
useRef
+ Dùng để lưu giá trị một element sử dụng thuộc tính .current để mỗi lần render không khởi tạo lại (vd: current = useRef(0) settimeout  current.current sẽ tăng không phải khởi tạo lại bằng 0
useEffect để quản lý vòng đời của một component:
	- #syntax
		useEffect(effectFunction, arrayDependencies)
	- useEffect(function) : được gọi mỗi khi component render xong (componentDidUpdate)
	- useEffect(function, []): được gọi một lần khi component được gắn vào dom(componentDidMount)
	-
	Thì thực tế thì useEffect cho phép chúng ta return 1 function, function này sẽ thực thi trước khi mà component đó được unmounted.
=================================================================
customize font
import * as Font from 'expo-font'
const fetchFonts = () => {Font.loadAsync({'open-sans': require('./assets/fonts/OpenSans-Bold.ttf')})}
import {AppLoading} from 'expo'
=================
customize ảnh: 
+ với ảnh trong folder tạo view bọc lấy ảnh rồi 27 module 4
+ responesive: Dùng import {Dimensions} của react-native
==============
Xoay màn hình: 
+ ở app.json: 
	- "orientation": "portrait":chỉ đọc "landscape": chỉ ngang, "default" cả 2
	- cần thay đổi chiều dài rộng của button khi xoay màn hình bằng cách xử dụng state, va khi Dimensions.addlistened("change", set laji state )	 (module 5 video 9) 
	- có thể tạo file .android .ios để react-native nhận biết nút cho các kiểu hệ điều hành
+ Navigation: 
	So when we use the StackNavigator (= next lecture), run

	npm install --save react-navigation-stack
	before you start using it (with v3 and lower, it was part of react-navigation itself).

	Also add this import in the file where you are using createStackNavigator:

	import { createStackNavigator } from 'react-navigation-stack';
	Same for TabsNavigator (used a little bit later in this module):

	npm install --save react-navigation-tabs
	import { createTabsNavigator } from 'react-navigation-tabs';
	And also for DrawerNavigator (also used later in this module):

	npm install --save react-navigation-drawer
	import { createDrawerNavigator } from 'react-navigation-drawer';
	
	- Khi truyền vào button thì sẽ gọi onPress={() => {props.navigation.navigate({routeName: 'Tên component đã khai báo', (có thể dùng thêm params: {categoryId:} để truyền thêm params)})}};
		dùng props.navigation.getParam('categoryId')
	có thể dùng navigation.push(khi tải lại cac trang cũ) pop() để back lại màn trước, replace() thay đổi màn không lưu lại stack
	- component khi thay đổi thông tin và style có thể dùng CategoriesSceen.navigationOptions = {
		  headerTitle: 'Meal Categories',
		  headerStyle: {
			backgroundColor: '#4a148c'
		  },
		  headerTintColor: 'white'
		}
	- mOdule 6 video 17
	
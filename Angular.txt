https://viblo.asia/p/angular-4-tu-a-den-z-Qbq5QLpwlD8
ngModel, ngFor, ngIf, () = "",
[ngModel] data binding one way
[(ngModel)] data binding 2 chi·ªÅu
Observable from rxjs/Observable && of from rxjs/Observable/of ƒë·ªÉ th·ª±c hi·ªán l·∫•y d·ªØ li·ªáu m·ªôt c√°ch b·∫•t ƒë·ªìng b·ªô; component d√πng service ph·∫£i dung subcrible arrow function ƒë·ªÉ l·∫•y d·ªØ li·ªáu
localReferent: #nameValue ElementRef
@input component con nh·∫≠n gi√° tr·ªã t·ª´ cha
@output component cha nh·∫≠n gi√° tr·ªã t·ª´ cong th√¥ng qua New eventemitter v√† .emit
@viewChild("", {static: true}) truy van vao phan tu con
@ContentChildv√† @ContentChildren: c√°c truy v·∫•n s·∫Ω tr·∫£ v·ªÅ c√°c ch·ªâ th·ªã hi·ªán c√≥ b√™n trong <ng-content></ng-content>
ng-content ƒë·ªÉ t√πy bi·∫øn th√†nh ph·∫ßn b√™n trong c·ªßa component con  
licycle {
+ngOnchanges: Called after a bound input property changes
+ ngOnInit: Called once the component is initialized
+ ngDoCheck: Called during every change detection run
+ ngAfterContentInit: Called after content (ng-content) has been projected into view
+ ngAfterContentChecked: Called every time the projected content has been checked
+ ngAfterViewInit: Called after the componentís view (and child views) has been initialized
+ ngAfterViewChecked: Called every time the view (and child views) have been checked
+ ngOnDestroy: Called once the component is about to be destroyed
}
OnChanges kh√¥ng n√™n th·ª±c hi·ªán c√πng DoCheck
Viewencapsulation: th·ª±c hi·ªán ƒë√≥ng g√≥i Dom (ki·ªÉu chia s·∫ª t√†i nguy√™n nh∆∞ style)
	+ViewEncapsulation.None: Kh√¥ng c√≥ b√≥ng DOM.Phong c√°ch kh√¥ng n·∫±m trong ph·∫°m vi th√†nh ph·∫ßn
	+ViewEncapsulation.Native: Angular s·∫Ω t·∫°o Shadow DOM cho th√†nh ph·∫ßn.Phong c√°ch l√† ph·∫°m vi cho c√°c th√†nh ph·∫ßn.
	+ViewEncapsulation.Emulation: Angular s·∫Ω kh√¥ng t·∫°o Shadow DOM cho th√†nh ph·∫ßn.Phong c√°ch s·∫Ω ƒë∆∞·ª£c ph·∫°m vi cho c√°c th√†nh ph·∫ßn.ƒê√¢y l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh cho ƒë√≥ng g√≥i.
attributeDirectives: thay ƒë·ªïi style c·ªßa dom;(ng class, ng style...)
structttural Directives: thay ƒë·ªïi c·∫•u tr√∫c DOM
Set: Bi·∫øn property th√†nh nh∆∞ m·ªôt method 
Service:
Dependency Injection l√† c√°ch design codes sao cho n√≥ c√≥ th·ªÉ "ti√™m" c√°c ƒë·ªëi t∆∞·ª£ng dependency c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng v√†o trong ƒë·ªëi t∆∞·ª£ng ƒë√≥.
ngModule --flat --module=app ƒë·ªÉ t·∫°o module
-------------------------------------------------------------------------------------------------------------------------
Router
RouterModule, Routes from angular/router routes Router =[ {path: '',redirect:'path', pathMatch: 'full': component},{path: 'path', component: component}]
import ActiedRoute Location : route : ActiedRoute => this.route.snap.paramMap.get("iddule")
path: ƒê∆∞·ªùng d·∫´n URL c·ªßa component hi·ªán t·∫°i.
component: ·ª®ng v·ªõi ƒë∆∞·ªùng d·∫´n b√™n tr√™n th√¨ load component n√†o.
redirectTo: Chuy·ªÉn h∆∞·ªõng ƒë·∫øn URL n√†y n·∫øu URL ·ªü path kh√¥ng tr√πng. V√≠ d·ª•, khi ng∆∞·ªùi d√πng g√µ URL linh tinh, ch√∫ng ta mu·ªën chuy·ªÉn h∆∞·ªõng v√† load trang Home ho·∫∑c trang b√°o l·ªói 404 th√¨ c·∫ßn ghi r√µ URL trang Home ho·∫∑c 404 v√†o redirectTo.
pathMatch: C√†i ƒë·∫∑t xem ch·∫ø ƒë·ªô ki·ªÉm tra url l√† nh∆∞ th·∫ø n√†o. khi gi√° tr·ªã l√† full th√¨ nghƒ©a l√† to√†n b·ªô url t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi s·∫Ω ph·∫£i ch√≠nh x√°c nh∆∞ trong b·ªô JSON Router. C√≤n khi gi√° tr·ªã l√† prefix th√¨ chu·ªói ƒë·∫ßu ti√™n c·ªßa url (d·∫•u s∆∞·ª£c ƒë·∫ßu ti√™n) s·∫Ω ƒë∆∞·ª£c ki·ªÉm tra. M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng n√≥i g√¨ th√¨ prefix s·∫Ω ƒë∆∞·ª£c ch·ªçn.
[routerLinkActiveOptions] = "{exact: true}";
routerLinkActive = "class"
+++++++++
--skipTests=true
====
Eventbingding router
import Router 
s·ª≠ d·ª•ng .navigate([url])||.navigateByUrl(url)
+++++++++
+ get params in router
+ import ActivedRoute
+ c√∫ ph√°p .snapshot.params
+ kh√¥ng √°p d·ª•ng chuy·ªÉn trang khi tr√™n c√πng 1 router. ex. product/1 -> product/2 kh√¥ng ƒë∆∞·ª£c
+ Tr·∫£ v·ªÅ Subcription 
+ C√∫ ph√°p ActivedRoute.params.subcrible(params: Params => {handler})
+ n√™n h·ªßy ƒë·ªëi t∆∞·ª£ng subcrible khi component b·ªã h·ªßy (ngOnDestroy) .unsubcrible();
+++++++++++
get params t·∫°i query params
+ template : routerLink + queryparams = "{}"
+ eventBinding: .navigate(['path'], {queryparams: {key: value}})
+ .activeRoute.queryparams.subcrible(() => {});
+ relativeTo : this.adtivedRouteService.parents;
+ childrouter :  activeRoute.parent.params.subcrible((params: Params) => {Handker})
+++++++++++
Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng:
- Canactive
	+ ng g guard: to ng∆∞·ªùi b·∫£o v·ªá ch√≥ components 
	+ th√™m v√†o trong ph·∫ßm appRoutes canActivate[guard] CanActivateChild[guard]
-CanDeactivate: kh√¥ng th·ªÉ tho√°t ra kh·ªèi component